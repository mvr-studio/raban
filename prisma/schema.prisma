// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
	memberships WorkspaceMembership[]
	settings	String @default("")
	createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Workspace {
	id	String	@id @default(cuid())
	name	String
	slug	String	@unique
	applications	Application[]
	memberships	WorkspaceMembership[]
	createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
}

model WorkspaceMembership {
	id	String	@id @default(cuid())
	userId	String
	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
	workspaceId String
	workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
	role String @default("USER")
}

model Application {
	id	String	@id @default(cuid())
	name String
	slug	String	@unique
	workspaceId	String
	workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
	createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
	events	Event[]
}

model Event {
	id	String	@id @default(cuid())
	metadata String
	context String?
	createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
	stateId	String
	state	EventState @relation(fields: [stateId], references: [id], onDelete: Cascade)
	applicationId	String
	application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model EventState {
	id	String	@id @default(cuid())
	name	String
	slug	String	@unique
	events	Event[]
}
